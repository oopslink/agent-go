// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/core/knowledge/knowledge.go

// Package knowledge is a generated GoMock package.
package knowledge

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	document "github.com/oopslink/agent-go/pkg/support/document"
)

// MockKnowledgeRetriever is a mock of KnowledgeRetriever interface.
type MockKnowledgeRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeRetrieverMockRecorder
}

// MockKnowledgeRetrieverMockRecorder is the mock recorder for MockKnowledgeRetriever.
type MockKnowledgeRetrieverMockRecorder struct {
	mock *MockKnowledgeRetriever
}

// NewMockKnowledgeRetriever creates a new mock instance.
func NewMockKnowledgeRetriever(ctrl *gomock.Controller) *MockKnowledgeRetriever {
	mock := &MockKnowledgeRetriever{ctrl: ctrl}
	mock.recorder = &MockKnowledgeRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeRetriever) EXPECT() *MockKnowledgeRetrieverMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockKnowledgeRetriever) Search(ctx context.Context, query string, opts ...SearchOption) ([]KnowledgeItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]KnowledgeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockKnowledgeRetrieverMockRecorder) Search(ctx, query interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockKnowledgeRetriever)(nil).Search), varargs...)
}

// MockKnowledgeUpdater is a mock of KnowledgeUpdater interface.
type MockKnowledgeUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeUpdaterMockRecorder
}

// MockKnowledgeUpdaterMockRecorder is the mock recorder for MockKnowledgeUpdater.
type MockKnowledgeUpdaterMockRecorder struct {
	mock *MockKnowledgeUpdater
}

// NewMockKnowledgeUpdater creates a new mock instance.
func NewMockKnowledgeUpdater(ctrl *gomock.Controller) *MockKnowledgeUpdater {
	mock := &MockKnowledgeUpdater{ctrl: ctrl}
	mock.recorder = &MockKnowledgeUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeUpdater) EXPECT() *MockKnowledgeUpdaterMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockKnowledgeUpdater) AddItem(ctx context.Context, item KnowledgeItem, opts ...AddOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, item}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddItem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockKnowledgeUpdaterMockRecorder) AddItem(ctx, item interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, item}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockKnowledgeUpdater)(nil).AddItem), varargs...)
}

// UpdateItem mocks base method.
func (m *MockKnowledgeUpdater) UpdateItem(ctx context.Context, id document.DocumentId, item KnowledgeItem, opts ...UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, item}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockKnowledgeUpdaterMockRecorder) UpdateItem(ctx, id, item interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, item}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockKnowledgeUpdater)(nil).UpdateItem), varargs...)
}

// MockKnowledgeManager is a mock of KnowledgeManager interface.
type MockKnowledgeManager struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeManagerMockRecorder
}

// MockKnowledgeManagerMockRecorder is the mock recorder for MockKnowledgeManager.
type MockKnowledgeManagerMockRecorder struct {
	mock *MockKnowledgeManager
}

// NewMockKnowledgeManager creates a new mock instance.
func NewMockKnowledgeManager(ctrl *gomock.Controller) *MockKnowledgeManager {
	mock := &MockKnowledgeManager{ctrl: ctrl}
	mock.recorder = &MockKnowledgeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeManager) EXPECT() *MockKnowledgeManagerMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockKnowledgeManager) DeleteItem(ctx context.Context, id document.DocumentId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockKnowledgeManagerMockRecorder) DeleteItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockKnowledgeManager)(nil).DeleteItem), ctx, id)
}

// GetItem mocks base method.
func (m *MockKnowledgeManager) GetItem(ctx context.Context, id document.DocumentId) (KnowledgeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(KnowledgeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockKnowledgeManagerMockRecorder) GetItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockKnowledgeManager)(nil).GetItem), ctx, id)
}

// GetMetadata mocks base method.
func (m *MockKnowledgeManager) GetMetadata() *KnowledgeBaseMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(*KnowledgeBaseMetadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockKnowledgeManagerMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockKnowledgeManager)(nil).GetMetadata))
}

// UpdateMetadata mocks base method.
func (m *MockKnowledgeManager) UpdateMetadata(metadata *KnowledgeBaseMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMetadata", metadata)
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockKnowledgeManagerMockRecorder) UpdateMetadata(metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockKnowledgeManager)(nil).UpdateMetadata), metadata)
}

// MockKnowledgeStorage is a mock of KnowledgeStorage interface.
type MockKnowledgeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeStorageMockRecorder
}

// MockKnowledgeStorageMockRecorder is the mock recorder for MockKnowledgeStorage.
type MockKnowledgeStorageMockRecorder struct {
	mock *MockKnowledgeStorage
}

// NewMockKnowledgeStorage creates a new mock instance.
func NewMockKnowledgeStorage(ctrl *gomock.Controller) *MockKnowledgeStorage {
	mock := &MockKnowledgeStorage{ctrl: ctrl}
	mock.recorder = &MockKnowledgeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeStorage) EXPECT() *MockKnowledgeStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockKnowledgeStorage) Add(ctx context.Context, doc *document.Document, opts ...AddOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockKnowledgeStorageMockRecorder) Add(ctx, doc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockKnowledgeStorage)(nil).Add), varargs...)
}

// Delete mocks base method.
func (m *MockKnowledgeStorage) Delete(ctx context.Context, id document.DocumentId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKnowledgeStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKnowledgeStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockKnowledgeStorage) Get(ctx context.Context, id document.DocumentId) (*document.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKnowledgeStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKnowledgeStorage)(nil).Get), ctx, id)
}

// Search mocks base method.
func (m *MockKnowledgeStorage) Search(ctx context.Context, query string, opts ...SearchOption) ([]*document.Document, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockKnowledgeStorageMockRecorder) Search(ctx, query interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockKnowledgeStorage)(nil).Search), varargs...)
}

// Update mocks base method.
func (m *MockKnowledgeStorage) Update(ctx context.Context, id document.DocumentId, doc *document.Document, opts ...UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKnowledgeStorageMockRecorder) Update(ctx, id, doc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKnowledgeStorage)(nil).Update), varargs...)
}

// MockKnowledgeBase is a mock of KnowledgeBase interface.
type MockKnowledgeBase struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeBaseMockRecorder
}

// MockKnowledgeBaseMockRecorder is the mock recorder for MockKnowledgeBase.
type MockKnowledgeBaseMockRecorder struct {
	mock *MockKnowledgeBase
}

// NewMockKnowledgeBase creates a new mock instance.
func NewMockKnowledgeBase(ctrl *gomock.Controller) *MockKnowledgeBase {
	mock := &MockKnowledgeBase{ctrl: ctrl}
	mock.recorder = &MockKnowledgeBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeBase) EXPECT() *MockKnowledgeBaseMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockKnowledgeBase) AddItem(ctx context.Context, item KnowledgeItem, opts ...AddOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, item}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddItem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockKnowledgeBaseMockRecorder) AddItem(ctx, item interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, item}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockKnowledgeBase)(nil).AddItem), varargs...)
}

// DeleteItem mocks base method.
func (m *MockKnowledgeBase) DeleteItem(ctx context.Context, id document.DocumentId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockKnowledgeBaseMockRecorder) DeleteItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockKnowledgeBase)(nil).DeleteItem), ctx, id)
}

// GetItem mocks base method.
func (m *MockKnowledgeBase) GetItem(ctx context.Context, id document.DocumentId) (KnowledgeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(KnowledgeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockKnowledgeBaseMockRecorder) GetItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockKnowledgeBase)(nil).GetItem), ctx, id)
}

// GetMetadata mocks base method.
func (m *MockKnowledgeBase) GetMetadata() *KnowledgeBaseMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(*KnowledgeBaseMetadata)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockKnowledgeBaseMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockKnowledgeBase)(nil).GetMetadata))
}

// Search mocks base method.
func (m *MockKnowledgeBase) Search(ctx context.Context, query string, opts ...SearchOption) ([]KnowledgeItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]KnowledgeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockKnowledgeBaseMockRecorder) Search(ctx, query interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockKnowledgeBase)(nil).Search), varargs...)
}

// UpdateItem mocks base method.
func (m *MockKnowledgeBase) UpdateItem(ctx context.Context, id document.DocumentId, item KnowledgeItem, opts ...UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, item}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockKnowledgeBaseMockRecorder) UpdateItem(ctx, id, item interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, item}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockKnowledgeBase)(nil).UpdateItem), varargs...)
}

// UpdateMetadata mocks base method.
func (m *MockKnowledgeBase) UpdateMetadata(metadata *KnowledgeBaseMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMetadata", metadata)
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockKnowledgeBaseMockRecorder) UpdateMetadata(metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockKnowledgeBase)(nil).UpdateMetadata), metadata)
}

// MockKnowledgeItem is a mock of KnowledgeItem interface.
type MockKnowledgeItem struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeItemMockRecorder
}

// MockKnowledgeItemMockRecorder is the mock recorder for MockKnowledgeItem.
type MockKnowledgeItemMockRecorder struct {
	mock *MockKnowledgeItem
}

// NewMockKnowledgeItem creates a new mock instance.
func NewMockKnowledgeItem(ctrl *gomock.Controller) *MockKnowledgeItem {
	mock := &MockKnowledgeItem{ctrl: ctrl}
	mock.recorder = &MockKnowledgeItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeItem) EXPECT() *MockKnowledgeItemMockRecorder {
	return m.recorder
}

// GetCreatedAt mocks base method.
func (m *MockKnowledgeItem) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockKnowledgeItemMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockKnowledgeItem)(nil).GetCreatedAt))
}

// GetId mocks base method.
func (m *MockKnowledgeItem) GetId() document.DocumentId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(document.DocumentId)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockKnowledgeItemMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockKnowledgeItem)(nil).GetId))
}

// GetUpdatedAt mocks base method.
func (m *MockKnowledgeItem) GetUpdatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockKnowledgeItemMockRecorder) GetUpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockKnowledgeItem)(nil).GetUpdatedAt))
}

// ToDocument mocks base method.
func (m *MockKnowledgeItem) ToDocument() *document.Document {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDocument")
	ret0, _ := ret[0].(*document.Document)
	return ret0
}

// ToDocument indicates an expected call of ToDocument.
func (mr *MockKnowledgeItemMockRecorder) ToDocument() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDocument", reflect.TypeOf((*MockKnowledgeItem)(nil).ToDocument))
}

// MockKnowledgeItemFactory is a mock of KnowledgeItemFactory interface.
type MockKnowledgeItemFactory struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeItemFactoryMockRecorder
}

// MockKnowledgeItemFactoryMockRecorder is the mock recorder for MockKnowledgeItemFactory.
type MockKnowledgeItemFactoryMockRecorder struct {
	mock *MockKnowledgeItemFactory
}

// NewMockKnowledgeItemFactory creates a new mock instance.
func NewMockKnowledgeItemFactory(ctrl *gomock.Controller) *MockKnowledgeItemFactory {
	mock := &MockKnowledgeItemFactory{ctrl: ctrl}
	mock.recorder = &MockKnowledgeItemFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeItemFactory) EXPECT() *MockKnowledgeItemFactoryMockRecorder {
	return m.recorder
}

// FromDocument mocks base method.
func (m *MockKnowledgeItemFactory) FromDocument(doc *document.Document) KnowledgeItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromDocument", doc)
	ret0, _ := ret[0].(KnowledgeItem)
	return ret0
}

// FromDocument indicates an expected call of FromDocument.
func (mr *MockKnowledgeItemFactoryMockRecorder) FromDocument(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromDocument", reflect.TypeOf((*MockKnowledgeItemFactory)(nil).FromDocument), doc)
}
