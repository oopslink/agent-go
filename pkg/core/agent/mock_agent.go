// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/core/agent/agent.go

// Package agent is a generated GoMock package.
package agent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventbus "github.com/oopslink/agent-go/pkg/support/eventbus"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockAgent) Run(ctx *RunContext) (chan<- *eventbus.Event, <-chan *eventbus.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(chan<- *eventbus.Event)
	ret1, _ := ret[1].(<-chan *eventbus.Event)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockAgentMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAgent)(nil).Run), ctx)
}

// MockBehaviorPattern is a mock of BehaviorPattern interface.
type MockBehaviorPattern struct {
	ctrl     *gomock.Controller
	recorder *MockBehaviorPatternMockRecorder
}

// MockBehaviorPatternMockRecorder is the mock recorder for MockBehaviorPattern.
type MockBehaviorPatternMockRecorder struct {
	mock *MockBehaviorPattern
}

// NewMockBehaviorPattern creates a new mock instance.
func NewMockBehaviorPattern(ctrl *gomock.Controller) *MockBehaviorPattern {
	mock := &MockBehaviorPattern{ctrl: ctrl}
	mock.recorder = &MockBehaviorPatternMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBehaviorPattern) EXPECT() *MockBehaviorPatternMockRecorder {
	return m.recorder
}

// NextStep mocks base method.
func (m *MockBehaviorPattern) NextStep(ctx *StepContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextStep", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// NextStep indicates an expected call of NextStep.
func (mr *MockBehaviorPatternMockRecorder) NextStep(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextStep", reflect.TypeOf((*MockBehaviorPattern)(nil).NextStep), ctx)
}

// SystemInstruction mocks base method.
func (m *MockBehaviorPattern) SystemInstruction(header string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemInstruction", header)
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemInstruction indicates an expected call of SystemInstruction.
func (mr *MockBehaviorPatternMockRecorder) SystemInstruction(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemInstruction", reflect.TypeOf((*MockBehaviorPattern)(nil).SystemInstruction), header)
}
