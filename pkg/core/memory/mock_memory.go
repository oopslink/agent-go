// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/core/memory/memory.go

// Package memory is a generated GoMock package.
package memory

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	llms "github.com/oopslink/agent-go/pkg/support/llms"
)

// MockMemoryRetriever is a mock of MemoryRetriever interface.
type MockMemoryRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryRetrieverMockRecorder
}

// MockMemoryRetrieverMockRecorder is the mock recorder for MockMemoryRetriever.
type MockMemoryRetrieverMockRecorder struct {
	mock *MockMemoryRetriever
}

// NewMockMemoryRetriever creates a new mock instance.
func NewMockMemoryRetriever(ctrl *gomock.Controller) *MockMemoryRetriever {
	mock := &MockMemoryRetriever{ctrl: ctrl}
	mock.recorder = &MockMemoryRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryRetriever) EXPECT() *MockMemoryRetrieverMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockMemoryRetriever) Retrieve(ctx context.Context, options ...MemoryRetrieveOption) ([]MemoryItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].([]MemoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockMemoryRetrieverMockRecorder) Retrieve(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockMemoryRetriever)(nil).Retrieve), varargs...)
}

// MockMemory is a mock of Memory interface.
type MockMemory struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryMockRecorder
}

// MockMemoryMockRecorder is the mock recorder for MockMemory.
type MockMemoryMockRecorder struct {
	mock *MockMemory
}

// NewMockMemory creates a new mock instance.
func NewMockMemory(ctrl *gomock.Controller) *MockMemory {
	mock := &MockMemory{ctrl: ctrl}
	mock.recorder = &MockMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemory) EXPECT() *MockMemoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMemory) Add(ctx context.Context, memory MemoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMemoryMockRecorder) Add(ctx, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMemory)(nil).Add), ctx, memory)
}

// Reset mocks base method.
func (m *MockMemory) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockMemoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMemory)(nil).Reset))
}

// Retrieve mocks base method.
func (m *MockMemory) Retrieve(ctx context.Context, options ...MemoryRetrieveOption) ([]MemoryItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].([]MemoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockMemoryMockRecorder) Retrieve(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockMemory)(nil).Retrieve), varargs...)
}

// MockMemoryItem is a mock of MemoryItem interface.
type MockMemoryItem struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryItemMockRecorder
}

// MockMemoryItemMockRecorder is the mock recorder for MockMemoryItem.
type MockMemoryItemMockRecorder struct {
	mock *MockMemoryItem
}

// NewMockMemoryItem creates a new mock instance.
func NewMockMemoryItem(ctrl *gomock.Controller) *MockMemoryItem {
	mock := &MockMemoryItem{ctrl: ctrl}
	mock.recorder = &MockMemoryItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryItem) EXPECT() *MockMemoryItemMockRecorder {
	return m.recorder
}

// AsMessage mocks base method.
func (m *MockMemoryItem) AsMessage() (*llms.Message, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsMessage")
	ret0, _ := ret[0].(*llms.Message)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// AsMessage indicates an expected call of AsMessage.
func (mr *MockMemoryItemMockRecorder) AsMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsMessage", reflect.TypeOf((*MockMemoryItem)(nil).AsMessage))
}

// GetContent mocks base method.
func (m *MockMemoryItem) GetContent() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockMemoryItemMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockMemoryItem)(nil).GetContent))
}

// GetCreatedAt mocks base method.
func (m *MockMemoryItem) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockMemoryItemMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockMemoryItem)(nil).GetCreatedAt))
}

// GetId mocks base method.
func (m *MockMemoryItem) GetId() MemoryItemId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(MemoryItemId)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockMemoryItemMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockMemoryItem)(nil).GetId))
}
