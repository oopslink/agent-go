// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/commons/utils/retry.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mocktimer is a mock of timer interface.
type Mocktimer struct {
	ctrl     *gomock.Controller
	recorder *MocktimerMockRecorder
}

// MocktimerMockRecorder is the mock recorder for Mocktimer.
type MocktimerMockRecorder struct {
	mock *Mocktimer
}

// NewMocktimer creates a new mock instance.
func NewMocktimer(ctrl *gomock.Controller) *Mocktimer {
	mock := &Mocktimer{ctrl: ctrl}
	mock.recorder = &MocktimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktimer) EXPECT() *MocktimerMockRecorder {
	return m.recorder
}

// C mocks base method.
func (m *Mocktimer) C() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// C indicates an expected call of C.
func (mr *MocktimerMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*Mocktimer)(nil).C))
}

// Start mocks base method.
func (m *Mocktimer) Start(duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", duration)
}

// Start indicates an expected call of Start.
func (mr *MocktimerMockRecorder) Start(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mocktimer)(nil).Start), duration)
}

// Stop mocks base method.
func (m *Mocktimer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MocktimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mocktimer)(nil).Stop))
}

// MockBackOff is a mock of BackOff interface.
type MockBackOff struct {
	ctrl     *gomock.Controller
	recorder *MockBackOffMockRecorder
}

// MockBackOffMockRecorder is the mock recorder for MockBackOff.
type MockBackOffMockRecorder struct {
	mock *MockBackOff
}

// NewMockBackOff creates a new mock instance.
func NewMockBackOff(ctrl *gomock.Controller) *MockBackOff {
	mock := &MockBackOff{ctrl: ctrl}
	mock.recorder = &MockBackOffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackOff) EXPECT() *MockBackOffMockRecorder {
	return m.recorder
}

// NextBackOff mocks base method.
func (m *MockBackOff) NextBackOff() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextBackOff")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// NextBackOff indicates an expected call of NextBackOff.
func (mr *MockBackOffMockRecorder) NextBackOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextBackOff", reflect.TypeOf((*MockBackOff)(nil).NextBackOff))
}

// Reset mocks base method.
func (m *MockBackOff) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBackOffMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBackOff)(nil).Reset))
}
