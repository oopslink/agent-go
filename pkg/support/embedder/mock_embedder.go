// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/support/embedder/embedder.go

// Package embedder is a generated GoMock package.
package embedder

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmbedder is a mock of Embedder interface.
type MockEmbedder struct {
	ctrl     *gomock.Controller
	recorder *MockEmbedderMockRecorder
}

// MockEmbedderMockRecorder is the mock recorder for MockEmbedder.
type MockEmbedderMockRecorder struct {
	mock *MockEmbedder
}

// NewMockEmbedder creates a new mock instance.
func NewMockEmbedder(ctrl *gomock.Controller) *MockEmbedder {
	mock := &MockEmbedder{ctrl: ctrl}
	mock.recorder = &MockEmbedderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbedder) EXPECT() *MockEmbedderMockRecorder {
	return m.recorder
}

// Embed mocks base method.
func (m *MockEmbedder) Embed(ctx context.Context, texts []string) ([]FloatVector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Embed", ctx, texts)
	ret0, _ := ret[0].([]FloatVector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Embed indicates an expected call of Embed.
func (mr *MockEmbedderMockRecorder) Embed(ctx, texts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Embed", reflect.TypeOf((*MockEmbedder)(nil).Embed), ctx, texts)
}
