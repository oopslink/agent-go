// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/support/vectordb/vectordb.go

// Package vectordb is a generated GoMock package.
package vectordb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	document "github.com/oopslink/agent-go/pkg/support/document"
	embedder "github.com/oopslink/agent-go/pkg/support/embedder"
)

// MockVectorDB is a mock of VectorDB interface.
type MockVectorDB struct {
	ctrl     *gomock.Controller
	recorder *MockVectorDBMockRecorder
}

// MockVectorDBMockRecorder is the mock recorder for MockVectorDB.
type MockVectorDBMockRecorder struct {
	mock *MockVectorDB
}

// NewMockVectorDB creates a new mock instance.
func NewMockVectorDB(ctrl *gomock.Controller) *MockVectorDB {
	mock := &MockVectorDB{ctrl: ctrl}
	mock.recorder = &MockVectorDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorDB) EXPECT() *MockVectorDBMockRecorder {
	return m.recorder
}

// AddDocuments mocks base method.
func (m *MockVectorDB) AddDocuments(ctx context.Context, documents []*document.Document, opts ...InsertOption) ([]document.DocumentId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, documents}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDocuments", varargs...)
	ret0, _ := ret[0].([]document.DocumentId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocuments indicates an expected call of AddDocuments.
func (mr *MockVectorDBMockRecorder) AddDocuments(ctx, documents interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, documents}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocuments", reflect.TypeOf((*MockVectorDB)(nil).AddDocuments), varargs...)
}

// Delete mocks base method.
func (m *MockVectorDB) Delete(ctx context.Context, documentId document.DocumentId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, documentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVectorDBMockRecorder) Delete(ctx, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVectorDB)(nil).Delete), ctx, documentId)
}

// Get mocks base method.
func (m *MockVectorDB) Get(ctx context.Context, documentId document.DocumentId) (*document.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, documentId)
	ret0, _ := ret[0].(*document.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVectorDBMockRecorder) Get(ctx, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVectorDB)(nil).Get), ctx, documentId)
}

// Search mocks base method.
func (m *MockVectorDB) Search(ctx context.Context, query string, maxDocuments int, opts ...SearchOption) ([]*ScoredDocument, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query, maxDocuments}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]*ScoredDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVectorDBMockRecorder) Search(ctx, query, maxDocuments interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query, maxDocuments}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVectorDB)(nil).Search), varargs...)
}

// UpdateDocuments mocks base method.
func (m *MockVectorDB) UpdateDocuments(ctx context.Context, documents []*document.Document, opts ...UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, documents}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocuments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocuments indicates an expected call of UpdateDocuments.
func (mr *MockVectorDBMockRecorder) UpdateDocuments(ctx, documents interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, documents}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocuments", reflect.TypeOf((*MockVectorDB)(nil).UpdateDocuments), varargs...)
}

// MockRetriever is a mock of Retriever interface.
type MockRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockRetrieverMockRecorder
}

// MockRetrieverMockRecorder is the mock recorder for MockRetriever.
type MockRetrieverMockRecorder struct {
	mock *MockRetriever
}

// NewMockRetriever creates a new mock instance.
func NewMockRetriever(ctrl *gomock.Controller) *MockRetriever {
	mock := &MockRetriever{ctrl: ctrl}
	mock.recorder = &MockRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetriever) EXPECT() *MockRetrieverMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockRetriever) Search(ctx context.Context, query string) ([]*ScoredDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]*ScoredDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRetrieverMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRetriever)(nil).Search), ctx, query)
}

// MockInsertOptions is a mock of InsertOptions interface.
type MockInsertOptions struct {
	ctrl     *gomock.Controller
	recorder *MockInsertOptionsMockRecorder
}

// MockInsertOptionsMockRecorder is the mock recorder for MockInsertOptions.
type MockInsertOptionsMockRecorder struct {
	mock *MockInsertOptions
}

// NewMockInsertOptions creates a new mock instance.
func NewMockInsertOptions(ctrl *gomock.Controller) *MockInsertOptions {
	mock := &MockInsertOptions{ctrl: ctrl}
	mock.recorder = &MockInsertOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertOptions) EXPECT() *MockInsertOptionsMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockInsertOptions) GetCollection() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockInsertOptionsMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockInsertOptions)(nil).GetCollection))
}

// GetEmbedder mocks base method.
func (m *MockInsertOptions) GetEmbedder() embedder.Embedder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbedder")
	ret0, _ := ret[0].(embedder.Embedder)
	return ret0
}

// GetEmbedder indicates an expected call of GetEmbedder.
func (mr *MockInsertOptionsMockRecorder) GetEmbedder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbedder", reflect.TypeOf((*MockInsertOptions)(nil).GetEmbedder))
}

// MockUpdateOptions is a mock of UpdateOptions interface.
type MockUpdateOptions struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateOptionsMockRecorder
}

// MockUpdateOptionsMockRecorder is the mock recorder for MockUpdateOptions.
type MockUpdateOptionsMockRecorder struct {
	mock *MockUpdateOptions
}

// NewMockUpdateOptions creates a new mock instance.
func NewMockUpdateOptions(ctrl *gomock.Controller) *MockUpdateOptions {
	mock := &MockUpdateOptions{ctrl: ctrl}
	mock.recorder = &MockUpdateOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateOptions) EXPECT() *MockUpdateOptionsMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockUpdateOptions) GetCollection() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockUpdateOptionsMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockUpdateOptions)(nil).GetCollection))
}

// GetEmbedder mocks base method.
func (m *MockUpdateOptions) GetEmbedder() embedder.Embedder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbedder")
	ret0, _ := ret[0].(embedder.Embedder)
	return ret0
}

// GetEmbedder indicates an expected call of GetEmbedder.
func (mr *MockUpdateOptionsMockRecorder) GetEmbedder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbedder", reflect.TypeOf((*MockUpdateOptions)(nil).GetEmbedder))
}

// MockSearchOptions is a mock of SearchOptions interface.
type MockSearchOptions struct {
	ctrl     *gomock.Controller
	recorder *MockSearchOptionsMockRecorder
}

// MockSearchOptionsMockRecorder is the mock recorder for MockSearchOptions.
type MockSearchOptionsMockRecorder struct {
	mock *MockSearchOptions
}

// NewMockSearchOptions creates a new mock instance.
func NewMockSearchOptions(ctrl *gomock.Controller) *MockSearchOptions {
	mock := &MockSearchOptions{ctrl: ctrl}
	mock.recorder = &MockSearchOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchOptions) EXPECT() *MockSearchOptionsMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockSearchOptions) GetCollection() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockSearchOptionsMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockSearchOptions)(nil).GetCollection))
}

// GetEmbedder mocks base method.
func (m *MockSearchOptions) GetEmbedder() embedder.Embedder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbedder")
	ret0, _ := ret[0].(embedder.Embedder)
	return ret0
}

// GetEmbedder indicates an expected call of GetEmbedder.
func (mr *MockSearchOptionsMockRecorder) GetEmbedder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbedder", reflect.TypeOf((*MockSearchOptions)(nil).GetEmbedder))
}

// GetFilters mocks base method.
func (m *MockSearchOptions) GetFilters() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockSearchOptionsMockRecorder) GetFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockSearchOptions)(nil).GetFilters))
}

// GetScoreThreshold mocks base method.
func (m *MockSearchOptions) GetScoreThreshold() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScoreThreshold")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetScoreThreshold indicates an expected call of GetScoreThreshold.
func (mr *MockSearchOptionsMockRecorder) GetScoreThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScoreThreshold", reflect.TypeOf((*MockSearchOptions)(nil).GetScoreThreshold))
}
