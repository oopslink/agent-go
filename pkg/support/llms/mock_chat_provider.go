// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/support/llms/chat_provider.go

// Package llms is a generated GoMock package.
package llms

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatProvider is a mock of ChatProvider interface.
type MockChatProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChatProviderMockRecorder
}

// MockChatProviderMockRecorder is the mock recorder for MockChatProvider.
type MockChatProviderMockRecorder struct {
	mock *MockChatProvider
}

// NewMockChatProvider creates a new mock instance.
func NewMockChatProvider(ctrl *gomock.Controller) *MockChatProvider {
	mock := &MockChatProvider{ctrl: ctrl}
	mock.recorder = &MockChatProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatProvider) EXPECT() *MockChatProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockChatProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChatProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChatProvider)(nil).Close))
}

// IsRetryableError mocks base method.
func (m *MockChatProvider) IsRetryableError(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryableError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryableError indicates an expected call of IsRetryableError.
func (mr *MockChatProviderMockRecorder) IsRetryableError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryableError", reflect.TypeOf((*MockChatProvider)(nil).IsRetryableError), arg0)
}

// NewChat mocks base method.
func (m *MockChatProvider) NewChat(systemPrompt string, model *Model) (Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChat", systemPrompt, model)
	ret0, _ := ret[0].(Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChat indicates an expected call of NewChat.
func (mr *MockChatProviderMockRecorder) NewChat(systemPrompt, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChat", reflect.TypeOf((*MockChatProvider)(nil).NewChat), systemPrompt, model)
}

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockChat) Send(ctx context.Context, messages []*Message, options ...ChatOption) (ChatResponseIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, messages}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(ChatResponseIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockChatMockRecorder) Send(ctx, messages interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, messages}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChat)(nil).Send), varargs...)
}
