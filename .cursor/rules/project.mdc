---
description: This rule provides comprehensive instructions for the Agent-Go project
alwaysApply: true
---

# Agent-Go Project Rules

Agent-Go is a lightweight LLM agent framework built with Go. This is a learning project designed to understand fundamental concepts and methodologies in the Agent domain.

## Project Structure

```
agent-go/
├── pkg/                   # Core packages
│   ├── core/              # Core agent functionality
│   │   ├── agent/         # Agent interface & generic implementation
│   │   │   ├── behavior_patterns/  # Behavior pattern implementations
│   │   │   ├── context/   # Context management
│   │   │   └── state/     # Agent state management
│   │   ├── tools/         # Built-in tools & utilities
│   │   ├── memory/        # Memory management (conversation history)
│   │   ├── knowledge/     # Knowledge base (RAG capabilities)
│   │   └── mcp/           # Model Context Protocol integration
│   ├── support/           # Supporting libraries
│   │   ├── llms/          # LLM providers (OpenAI, Anthropic, Gemini)
│   │   ├── vectordb/      # Vector database (Milvus)
│   │   ├── embedder/      # Embedding models
│   │   ├── document/      # Document processing & chunking
│   │   ├── eventbus/      # Event-driven communication
│   │   └── journal/       # Logging & journaling
│   └── commons/           # Common utilities
│       ├── errors/        # Error handling
│       └── utils/         # Utility functions
├── examples/              # Example applications
│   ├── apps/              # Full applications (chat app)
│   └── snippets/          # Code snippets (CoT, ReAct, RAG, etc.)
├── design/                # Design documents (architecture specs)
├── assets/                # Static assets (logos, diagrams)
└── build/                 # Build output directory
```

## Architecture Overview

The framework follows a modular, event-driven architecture:

- **Agent**: Core execution engine with pluggable behavior patterns
- **Context**: Aggregates model, memory, tools, knowledge, and state
- **BehaviorPattern**: Defines reasoning strategies (Generic, CoT, ReAct, RAG, Plan&Execute)
- **Memory**: Manages conversation history and context
- **Tools**: Provides external capabilities via MCP protocol
- **Knowledge**: Domain-specific information via vector search
- **LLM Providers**: Supports OpenAI, Anthropic, and Gemini

## Development Guidelines

### 1. Code Organization
- Follow Go module structure with clear separation of concerns
- Core functionality in `pkg/core/`, supporting libraries in `pkg/support/`
- Keep interfaces in separate files and implement dependency injection
- Use event-driven patterns for async communication

### 2. Testing Strategy
- Write unit tests for all public interfaces
- Use mocks for external dependencies (generated via `make gomock`)
- Include integration tests in examples
- Maintain test coverage reports

### 3. Error Handling
- Use structured error handling with error codes
- Implement retry mechanisms for external calls
- Log errors with proper context using k8s.io/klog

### 4. Behavior Patterns
When implementing new behavior patterns:
- Implement the `BehaviorPattern` interface
- Add system instruction generation
- Handle tool calls and memory updates
- Support streaming responses via event bus

### 5. LLM Integration
- Support multiple providers through unified interface
- Implement proper rate limiting and error handling
- Use streaming responses where possible
- Handle token limits and context management

## Build Commands

### Core Commands
- `make build` - Build the project binary
- `make test` - Run all unit tests
- `make test/coverage` - Run tests with coverage report
- `make fmt` - Format Go code
- `make gomock` - Generate mock classes
- `make deps` - Install dependencies

### Development Tools
- `make clean` - Clean build artifacts
- Coverage reports generated in `coverage.html`
- Mock generation for all core interfaces

## Key Dependencies

- **LLM SDKs**: OpenAI, Anthropic, Gemini
- **Vector DB**: Milvus SDK for vector storage
- **MCP**: Model Context Protocol for tool integration
- **Testing**: Go mock, testify
- **Utilities**: UUID, YAML, HTML parsing

## Behavior Patterns

### Supported Patterns
1. **Generic**: Basic conversational agent
2. **CoT (Chain of Thought)**: Step-by-step reasoning
3. **ReAct**: Reasoning and Acting with tools
4. **RAG**: Retrieval-Augmented Generation
5. **Plan & Execute**: Planning and execution phases

### Adding New Patterns
1. Implement `BehaviorPattern` interface
2. Add to `behavior_patterns/` directory
3. Include comprehensive tests
4. Add example in `examples/snippets/`

## Configuration

### Environment Variables
- API keys for LLM providers
- Vector database connection settings
- MCP server configurations

### Config Files
- JSON configuration for applications
- System prompts in markdown files
- Tool definitions via MCP schema

## Best Practices

1. **Interface-First Design**: Define interfaces before implementations
2. **Event-Driven**: Use event bus for decoupled communication
3. **Context Management**: Proper context aggregation and lifecycle
4. **Error Resilience**: Implement retries and graceful degradation
5. **Documentation**: Maintain design docs in `design/` directory
6. **Testing**: Comprehensive unit and integration tests
